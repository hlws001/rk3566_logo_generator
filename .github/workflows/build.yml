#这是一个手动触发的工作流,用于在支持的RK3566设备上构建带有更新的Arkos标识的图像

     姓名   : 带有标志生成器的Arkos内核

     在…上   :
     工作流程   :    
     投入   :    
      设备_单元       :
        类型       : 选择
        描述       : 'RGB30'
        必需的       : 真实的
        选择权       :
        - RG353
        - RG503
        - Rgb30
        - RK2023
      图片_链接       :
        描述       : 'https://ibb.co/hd6NN5t'
        必需的       : 真实的
      更新数据_Hdmi       :
        类型       : 选择
        描述       : 你也想更新hdmi的标识吗? '
        必需的       : 假的
        选择权       :
        - 不
        - 是的
      Hdmi_图片_链接       :
        描述       : 'HTML链接到您的巴布亚新几内亚文件的hdmi输出'
        必需的       : 假的
     乔布斯   :
  #这个工作流包含一个作业。
     建造   :    
    #这项工作将根据什么类型的跑步者
     逃跑   : 乌本图-20.04    
    #步骤表示将作为作业的一部分执行的任务序列
     台阶   :    
     - 姓名       : 结帐手续
       使用       : 行动/结账@v3
      与…有关       :
        参考文件       : $ {       { 名称 }       }
        吸引力的深度       : 1
    - 姓名       : 选定内核回购
      身份证      : Build_kernel_with_new_logo
      外壳     : 猛击 { 0 }
      跑   : |

        #验证提供的HTML链接是指向文件的。巴布亚新几内亚或来自国际广播公司
        if [[ "${{ github.event.inputs.picture_link }}" != *.png ]] && [[ "${{ github.event.inputs.picture_link }}" != *.PNG ]] && [[ "${{ github.event.inputs.picture_link }}" != *"ibb.co"* ]]; then
          错误:链接似乎没有包含一个。巴布亚新几内亚档案"
          1号出口
        菲

        #安装必要的内核构建和标识处理工具
        最新情况
        安装建筑物基本设备LZOP建筑物基本海湾合作委员会

        为这个内核构建克隆正确的内核回购
        if [[ "${{ github.event.inputs.device_unit }}" == "RG353" ]]; then
           它="RG353V内核"
           git clone --depth=1 --recursive https://github.com/christianhaitian/${whichgit}.git
        elif [[ "${{ github.event.inputs.device_unit }}" == "RG503" ]]; then
           其中="rg503核"
           git clone --depth=1 --recursive https://github.com/christianhaitian/${whichgit}.git
        其他的
           它="RG353V内核"
           git clone --depth=1 --recursive https://github.com/christianhaitian/${whichgit}.git -b rk2023
        菲

        #安装构建内核的必要工具链
        mkdir -p ./prebuilts/gcc/linux-x86/aarch64/
        wget https://releases.linaro.org/components/toolchain/binaries/6.3-2017.05/aarch64-linux-gnu/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu.tar.xz
        TARJxvfGCC-亚麻-6.3.1-2011.05-x86_64_阿奇-64-加纳。建设/海湾合作委员会/利努克斯-X86/阿卡奇64/
        美元(每一美元)

        #检查这是否是一个巴斯特板
        #如是巴氏板,则须连结
        我们需要真正的标志链接
        #并尝试处理它。
        if [[ "${{ github.event.inputs.picture_link }}" == *"pasteboard.co"* ]]; then
          wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.picture_link }}" -O logo.txt
          real_logo="$(grep 'img data-src="' logo.txt | cut -d '"' -f 2)"
          wget -t 3 -T 60 --no-check-certificate "${real_logo}" -O logo.png
        elif [[ "${{ github.event.inputs.picture_link }}" == *"ibb.co"* ]]; then
          wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.picture_link }}" -O logo.txt
          real_logo="$(grep 'og:image" content="' logo.txt | cut -d '"' -f 4)"
          wget -t 3 -T 60 --no-check-certificate "${real_logo}" -O logo.png
        else
          wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.picture_link }}" -O logo.png
        fi
        if [ "$?" != "0" ]; then
          echo "::error::Failed to get ${{ github.event.inputs.picture_link }}"
          exit 1
        fi
        if [ ! -z "${{ github.event.inputs.hdmi_picture_link }}" ]; then
          if [[ "${{ github.event.inputs.hdmi_picture_link }}" == *"pasteboard.co"* ]]; then
            wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.hdmi_picture_link }}" -O hdmi_logo.txt
            real_logo="$(grep 'img data-src="' hdmi_logo.txt | cut -d '"' -f 2)"
            wget -t 3 -T 60 --no-check-certificate "${real_logo}" -O hdmi_logo.png
          elif [[ "${{ github.event.inputs.hdmi_picture_link }}" == *"ibb.co"* ]]; then
            wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.hdmi_picture_link }}" -O hdmi_logo.txt
            real_logo="$(grep 'og:image" content="' hdmi_logo.txt | cut -d '"' -f 4)"
            wget -t 3 -T 60 --no-check-certificate "${real_logo}" -O hdmi_logo.png
          else
            wget -t 3 -T 60 --no-check-certificate "${{ github.event.inputs.hdmi_picture_link }}" -O hdmi_logo.png
          fi
          if [ "$?" != "0" ]; then
            echo "::error::Failed to get ${{ github.event.inputs.hdmi_picture_link }}"
            exit 1
          fi
        fi

        # Process the downloaded logo into the format necessary for the kernel
        pngtopnm logo.png | ppmquant 224 | pnmnoraw > drivers/video/logo/logo_linux_clut224.ppm
        if [ "$?" != "0" ]; then
          echo "::error::${{ github.event.inputs.picture_link }} is not a compatible png file for the boot logo"
          exit 1
        fi
        if [[ "${{ github.event.inputs.update_hdmi }}" == "Yep" ]]; then
          if [ -f "hdmi_logo.png" ]; then
            pngtopnm hdmi_logo.png | ppmquant 224 | pnmnoraw > drivers/video/logo/logo_hdmi_clut224.ppm
            if [ "$?" != "0" ]; then
              echo "::error::${{ github.event.inputs.hdmi_picture_link }} is not a compatible png file for the boot logo"
              exit 1
            fi
          else
            imgp -nx 1280x720 logo.png
            pngtopnm logo_IMGP.png | ppmquant 224 | pnmnoraw > drivers/video/logo/logo_hdmi_clut224.ppm
            if [ "$?" != "0" ]; then
              echo "::error::${{ github.event.inputs.picture_link }} is not a compatible png file for the hdmi output logo"
              exit 1
            fi
          fi
        fi

        # If no errors, let's build the kernel and make it available as an artifact if successful
        if [[ "${{ github.event.inputs.device_unit }}" == "RK2023" ]] || [[ "${{ github.event.inputs.device_unit }}" == "RGB30" ]]; then
          make ARCH=arm64 rk3566_optimized_with_wifi_linux_defconfig && make ARCH=arm64 KERNEL_DTS=rk3566 KERNEL_CONFIG=rk3566_optimized_with_wifi_linux_defconfig -j2
        else
          make ARCH=arm64 rk3566_optimized_linux_defconfig && make ARCH=arm64 KERNEL_DTS=rk3566 KERNEL_CONFIG=rk3566_optimized_linux_defconfig -j2
        fi
        cp arch/arm64/boot/Image ../.
    - name: Get kernel artifact
      uses: actions/upload-artifact@v3
      with:
        name: image_${{ github.event.inputs.device_unit }}
        path: Image
